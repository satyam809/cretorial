import React, { useEffect, useState, useRef } from "react";
import { useParams, useHistory } from "react-router-dom";
import {
  Row,
  Col,
  Card,
  Button,
  Alert,
  Form,
  Offcanvas,
  ButtonGroup,
} from "react-bootstrap";
import Editor from "../../components/Editor/";

import { toast } from "react-toastify";
import "suneditor/dist/css/suneditor.min.css";
import SunEditor, { buttonList } from "suneditor-react";
// components
import PageTitleNew from "../../components/PageTitleNew";
import * as apiService from "../../services";
import FileUploader from "../../components/FileUploader";

// styles
import "./socia.css";
import "easymde/dist/easymde.min.css";
import { NULL } from "node-sass";
import Spinner from "../../components/Spinner";

interface RouteParams {
  name: string;
}

const ContentImage = () => {
  const { name } = useParams<RouteParams>();
  const [validated, setValidated] = useState<boolean>(false);
  const [isSubmitting, setIsLoading] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [isShow, setIsShow] = useState(false);
  const [searchData, setsearchData] = useState([]);
  const [getTitleName, setTitleName] = useState("");
  const [getTitleCard, setTitleCard] = useState("");
  const [getKeyword, setKeyword] = useState("");
  const [error, setError] = useState([]);
  const [show, setShow] = useState<boolean>(false);
  const formRef = useRef<HTMLFormElement>(null);
  const [imagePreview, setImagePreview] = useState<File | null>(null);
  const [postData, setData] = useState({
    userid: "",
    keyword: "",
    similar: "",
    words: "",
    count: "10",
    tone: "",
  });
  const history = useHistory();
  const [contentEditor, setContentEditor] = useState<Array<HTMLElement>>([]);
  // console.log(name);

  /**
   * handle modal toggle
   */
  const toggle = () => {
    setShow((prevState) => !prevState);
  };

  const delay = 1000;
  const options = {
    autofocus: false,
    autosave: {
      enabled: true,
      uniqueId: "1",
      delay,
    },
  };

  const handleChange = ({ currentTarget: input }: any) => {
    // console.log(input.value);
    setData({ ...postData, [input.name]: input.value });
  };

  /*
   * handle form submission
   */
  const handleSubmit = async (e: any) => {
    e.preventDefault();
    setIsLoading(true);
    const form = e.currentTarget;
    if (form.checkValidity() === false) {
      e.stopPropagation();
      setValidated(true);
      setIsLoading(false);
    } else {
      setsearchData([]);
      // const {keyword, count, tone} = e.target.elements;
      // const searchData = {keyword: getKeyword, count:'', tone:tone.value};
      if (getKeyword == "") {
        toast.warning("Not Found Any Keyword! Try With diffrent Image", {
          position: "top-right",
          autoClose: 1000,
          hideProgressBar: true,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      } else {
        postData.keyword = getKeyword;
        const searchData = postData;
        console.log(searchData);
        const data = await apiService.contentPost(name, { searchData });
        if (data.success === false) {
          toast.info(data.Message, {
            position: "top-right",
            autoClose: 1000,
            hideProgressBar: true,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
          });
        } else {
          const cleanArray = data.result.filter((val: any) => val != " ");
          setsearchData(cleanArray);
        }
      }
      // setIsShow(false);
      setIsLoading(false);
      setValidated(false);

      // console.log(getfiles);
    }
  };

  const resetFileInput = () => {
    formRef.current?.reset();
  };

  const getTitle = async (name: string) => {
    getSubStatus();
    setIsShow(false);
    setIsLoading(false);
    setsearchData([]);
    setImagePreview(null);
    resetFileInput();
    setData({
      userid: "",
      keyword: "",
      similar: "",
      words: "",
      count: "10",
      tone: "",
    });
    if (name == "hashtagimgkeyword") {
      setTitleName("Hashtags From Image");
      setTitleCard(
        "Get high-quality hashtags generated by our AI Wizard inspired by visuals, emotions, and concept of your image."
      );
    } else if (name == "slogans") {
      setTitleName("Slogans From Image");
      setTitleCard(
        "Get high-quality slogans generated by our AI Wizard inspired by visuals, emotions, and concept of your image."
      );
    } else if (name == "facebookimgkeyword") {
      setTitleName("Facebook Caption From Image");
      setTitleCard(
        "Get AI generated quirky captions that complement your post making it truly shine!"
      );
    } else if (name == "instaimgkeyword") {
      setTitleName("Instagram Caption From Image");
      setTitleCard(
        "Get AI generated captivating captions for Instagram that make your posts unlike no other!"
      );
    } else if (name == "tweetimgkeyword") {
      setTitleName("Tweet From Image");
      setTitleCard(
        "Get AI generated tweets that are relevant and contextual to your image."
      );
    } else if (name == "linkedinimgkeyword") {
      setTitleName("LinkedIn Post From Image");
      setTitleCard(
        "Get AI generated professional posts to establish yourself as a thought leader in your industry."
      );
    } else {
      setTitleName("Keywords from Files and Webpages");
      setTitleCard(
        "Find magical keywords from your files and webpages for search optimizing and enhanced quality writing."
      );
    }
  };
  let copyArr: Array<HTMLElement> = [];
  const _copyText = (e: any, text: any) => {
    var textField = document.createElement("textarea");
    textField.innerText = text;
    document.body.appendChild(textField);
    textField.select();
    document.execCommand("copy");
    textField.remove();

    const currentButton = e.target;
    //console.log(currentButton);
    if (currentButton.innerText === "Copy") {
      currentButton.innerHTML = `Copied`;
      copyArr = [...contentEditor, text];
      setContentEditor(copyArr);
    }
  };

  const uploadFile = async (e: any) => {
    if (e.target.value.length) {
      setIsUploading(true);
      setIsShow(false);
      const file = e.target.files[0];
      setImagePreview(e.target.files[0]);
      // setImage(e.target.files[0].name);
      const data = await apiService.clarifyPost(file);
      if (data.success === false) {
      } else {
        const keyword = data
          .map(function (val: any) {
            return val.name;
          })
          .join(",");
        // console.log(keyword);
        setKeyword(keyword);
      }
      setIsUploading(false);
      setIsShow(true);
    }
  };

  const savePost = async (e: any, value: any) => {
    console.log(value);
    const data = await apiService.savePost(name, value);
    if (data.Message) {
      const currentButton = e.target;
      if (currentButton.innerText === "Save") {
        currentButton.innerHTML = ` Saved`;
      }
      toast.success(data.Message, {
        position: "top-right",
        autoClose: 1000,
        hideProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    }
  };

  const moreLikeThis = async (e: any, value: any) => {
    history.push('/hashtag/hashtags-by-text/', { state: value });
    setIsLoading(true);
    setsearchData([]);
    postData.similar = value;
    const searchData = postData;
    console.log(searchData);
    const data = await apiService.contentPost(name, { searchData });
    if (data.success === false) {
      toast.info(data.Message, {
        position: "top-right",
        autoClose: 1000,
        hideProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      const cleanArray = data.result.filter((val: any) => val != " ");
      setsearchData(cleanArray);
    }
    setIsLoading(false);
    setValidated(false);
  };

  const getSubStatus = async () => {
    const data = await apiService.CaiShowSubsData();
    console.log(data);
    if (data.Status != "Active") {
      history.push("/pages/pricing");
    }
  };

  useEffect(() => {
    getTitle(name);
  }, [name]);

  return (
    <React.Fragment>
      <PageTitleNew
        breadCrumbItems={[
          { label: "Image", path: `/image/${name}` },
          { label: getTitleName, path: `/image/${name}`, active: true },
        ]}
        title={getTitleName}
        subtitle={getTitleCard}
      />

      <Row>
        <Col lg={6} className={(searchData.length > 0) ? "fixedEditor" : ''}>
          <Card>
            <Card.Body>
              <h4 className="header-title mb-2">{getTitleCard}</h4>

              <Form
                noValidate
                ref={formRef}
                validated={validated}
                onSubmit={handleSubmit}
              >
                {/* <FileUploader
                                    onFileUpload={(files) => {
                                        // setfiles(files[0]);
                                        uploadFile(files[0]);
                                        console.log('Uploaded files - ', files);
                                    }}
                                /> */}
                <Form.Group className="mb-3">
                  <Form.Label>Upload Your Image</Form.Label>
                  <Form.Control
                    accept="image/*"
                    type="file"
                    name="uploadimg"
                    onChange={uploadFile}
                    required
                  />
                  {imagePreview === null ? (
                    ""
                  ) : (
                    <div className="my-3">
                      <img
                        className="uploadimg img-fluid"
                        src={
                          imagePreview === null
                            ? ""
                            : URL.createObjectURL(imagePreview)
                        }
                        alt="preview"
                      />
                    </div>
                  )}
                  {/* <img src={file} className="img-fluid" /> */}
                  <Form.Control.Feedback type="invalid">
                    Please provide a Keyowrd.
                  </Form.Control.Feedback>
                </Form.Group>
                <Form.Group
                  className="mb-3 d-none"
                  controlId="validationCustom05"
                >
                  <Form.Label>Keyowrd</Form.Label>
                  <Form.Control
                    as="textarea"
                    name="keyword"
                    rows={1}
                    value={getKeyword}
                    placeholder="Keyowrds"
                    required
                    readOnly
                  />
                  <Form.Control.Feedback type="invalid">
                    Please provide a Keyowrd.
                  </Form.Control.Feedback>
                </Form.Group>
                {isShow && (
                  <>
                    {name != "hashtagimgkeyword" && name != "keywordfiles" && (
                      <Form.Group
                        className="my-3"
                        controlId="validationCustom06"
                      >
                        <Form.Label>Tone</Form.Label>
                        <Form.Select
                          name="tone"
                          onChange={handleChange}
                          required
                        >
                          <option value="">Select Tone</option>
                          <option value="professional">Professional</option>
                          <option value="excited">Excited</option>
                          <option value="encouraging">Encouraging</option>
                          <option value="funny">Funny</option>
                          <option value="dramatic">Dramatic</option>
                          <option value="witty">Witty</option>
                          <option value="sarcastic">Sarcastic</option>
                          <option value="engaging">Engaging</option>
                          <option value="creative">Creative</option>
                          <option value="persusasive">Persusasive</option>
                          <option value="thoughtful">Thoughtful</option>
                          <option value="persuasive">Persuasive</option>
                        </Form.Select>
                        <Form.Control.Feedback type="invalid">
                          Please provide a Tone.
                        </Form.Control.Feedback>
                      </Form.Group>
                    )}
                    <div className="clearfix">
                      <Button type="submit" disabled={isSubmitting}>
                        {isSubmitting && (
                          <span className="spinner-border spinner-border-sm me-1"></span>
                        )}
                        Create
                      </Button>
                    </div>
                  </>
                )}

                {isUploading && (
                  <div className="clearfix text-center">
                    <Spinner className="m-2" color="primary">
                      <span className="visually-hidden">Loading...</span>
                    </Spinner>
                    <p>Uploading</p>
                  </div>
                )}
                {/* {isShow ? '' :
                                    <Button className="ms-2" variant="primary" onClick={toggle}>
                                        Editior
                                    </Button>
                                }
                                <Offcanvas show={show} onHide={toggle} placement="end">
                                    <Offcanvas.Header closeButton>
                                        <h5 id="offcanvasTopLabel">Editior</h5>
                                    </Offcanvas.Header>
                                    <Offcanvas.Body>
                                        <div>
                                            <Editor />
                                        </div>
                                    </Offcanvas.Body>
                                </Offcanvas> */}
              </Form>
            </Card.Body>
          </Card>
          <div className="my-3">
            {searchData?.map((item, i) => {
              return (
                <Card key={i}>
                  <Row className="g-0 align-items-center">
                    <Col md={12}>
                      <Card.Body>
                        {/* <Card.Title as="h5" className="fs-16">
                                                Card title
                                            </Card.Title> */}
                        <Card.Text className="text-muted">{item}</Card.Text>
                        <ButtonGroup
                          className="me-1"
                          onClick={(e) => {
                            _copyText(e, item);
                          }}
                        >
                          <Button className="btn btn-soft-secondary btn-sm">
                            <i
                              className="uil uil-copy me-1"
                              style={{ fontStyle: "unset" }}
                            >
                              Copy
                            </i>
                          </Button>
                        </ButtonGroup>
                        <ButtonGroup
                          className="me-1"
                          onClick={(e) => {
                            savePost(e, item);
                          }}
                        >
                          <Button className="btn btn-soft-secondary btn-sm">
                            <i
                              className="uil uil-heart-alt me-1"
                              style={{ fontStyle: "unset" }}
                            >
                              Save
                            </i>
                          </Button>
                        </ButtonGroup>
                        <ButtonGroup className="me-1">
                          <Button
                            className="btn btn-soft-secondary btn-sm"
                            onClick={(e) => {
                              moreLikeThis(e, item);
                            }}
                          >
                            <i className="uil uil-plus-square me-1"></i>Get HashTags
                          </Button>
                        </ButtonGroup>
                        {/* <ButtonGroup className="me-1">
                                                <Button className="btn btn-soft-secondary btn-sm">
                                                    <i className="uil uil-times-circle me-1"></i>Remove
                                                </Button>
                                            </ButtonGroup> */}
                        {/* <Card.Link href="javascript::void(0)" className="text-custom">
                                                Copy
                                            </Card.Link> */}
                        {/* <Card.Text>
                                                <small className="text-muted">Last updated 3 mins ago</small>
                                            </Card.Text> */}
                      </Card.Body>
                    </Col>
                  </Row>
                </Card>
              );
            })}
          </div>
        </Col>

        <Col lg={6}>
          <Card>
            <Card.Body>
              <h4 className="header-title mt-0 mb-2">Editior</h4>
              {/* <p className="sub-header">
                                SimpleMDE is a light-weight, simple, embeddable, and beautiful JS markdown editor
                            </p> */}
              <SunEditor
                setDefaultStyle="font-family:IBM Plex Sans, sans-serif;"
                setContents={contentEditor
                  .map((element) => element)
                  .join("</br></br>")}
                setOptions={{
                  audioAccept: "true",
                  imageUrlInput: true,
                  imageMultipleFile: true,
                  previewTemplate: "<div style='margin: 50px;'> <h1>Cretorial AI View Template</h1> {{contents}}</div>",
                  imageGalleryUrl: "https://cretorial.ai/cretorial/api/editor/gallery.php",
                  height: "400",
                  buttonList: [
                    ["undo", "redo"],
                    ["font", "fontSize", "formatBlock", "fontColor"],
                    ["indent", "outdent", "table"],
                    ["list"],
                    ["image", "link", "video"],
                    ["bold", "underline", "italic"],
                    [
                      "-right",
                      ":i-More Misc-default.more_vertical",
                      "blockquote",
                      "preview",
                      "print",
                      "save",
                      "template",
                      "codeView",
                      "fullScreen",
                      "showBlocks",
                      "audio",
                      "imageGallery",
                      "align",
                      "horizontalRule",
                      "lineHeight",
                      "strike",
                      "subscript",
                      "superscript",
                      "hiliteColor",
                      "textStyle",
                      "removeFormat",
                      "paragraphStyle",
                    ],
                  ],
                }}
                setAllPlugins={true}
              />
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </React.Fragment>
  );
};

export default ContentImage;
